import telebot
import requests
import threading
import time
import gspread
from google.oauth2.service_account import Credentials

TELEGRAM_BOT_TOKEN = "7841693985:AAE5Kt19ek3tmAGg6wXiTWy2867ZbqgkcPE"
WEATHER_API_KEY = "6c7e3db77edfd1d56eb3ae377ba89ce3"
SPREADSHEET_ID = "1gpxCyi4uyFQZIXzxZpB5FMkiny_T739edjOxfjC7S64"
RANGE_NAME = "Sheet1!A:D"
CREDENTIALS_FILE = r"C:\Users\xrect\PycharmProjects\pythonProject2\bot11111-452510-4f0f8fb6fc3c.json"

def get_google_sheet_service():
    creds = Credentials.from_service_account_file(
        CREDENTIALS_FILE, scopes=["https://www.googleapis.com/auth/spreadsheets"]
    )
    client = gspread.authorize(creds)
    return client

def write_to_sheet(reminder_message, days, hours, minutes, seconds):
    try:
        client = get_google_sheet_service()
        sheet = client.open_by_key(SPREADSHEET_ID).sheet1
        row = [reminder_message, days, hours, minutes, seconds]
        sheet.append_row(row)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ: {e}")

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

reminders = {}

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id,
                     '*–ü—Ä–∏–≤—ñ—Ç! –Ø Den4ik_bot!* üëã\n'
                     '–Ø –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º –∑ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è–º–∏, –ø–æ–≥–æ–¥–∏ —Ç–∞ —ñ–Ω—à–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏.\n\n'
                     '_–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏:_\n'
                     '/start - —Å—Ç–∞—Ä—Ç\n'
                     '/help - –¥–æ–ø–æ–º–æ–≥–∞\n'
                     '/weather <–º—ñ—Å—Ç–æ> - –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏\n'
                     '/remind - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è', parse_mode='Markdown')

@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id,
                     '*–ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞:*\n\n'
                     '/start - –ü–æ—á–∞—Ç–∏ –≤–∑–∞—î–º–æ–¥—ñ—é –∑ –±–æ—Ç–æ–º.\n'
                     '/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.\n'
                     '/weather <–º—ñ—Å—Ç–æ> - –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –¥–ª—è –º—ñ—Å—Ç–∞.\n'
                     '/remind - –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞ –ø–µ–≤–Ω–∏–π —á–∞—Å.\n', parse_mode='Markdown')

def get_weather(city):
    url = f'http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric'
    response = requests.get(url)
    data = response.json()
    if data.get("cod") != 200:
        return "‚ùå –ü–æ–º–∏–ª–∫–∞: –ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!"
    temp = data['main']['temp']
    description = data['weather'][0]['description']
    return f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C, –°—Ç–∞–Ω: {description}'

@bot.message_handler(commands=['remind'])
def remind(message):
    bot.send_message(message.chat.id, "‚ö†Ô∏è –©–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–≥–∞–¥–∞—Ç–∏? –ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
    bot.register_next_step_handler(message, get_reminder_message)

def get_reminder_message(message):
    reminder_message = message.text
    reminders[message.chat.id] = {'message': reminder_message}
    bot.send_message(message.chat.id, "‚è≥ –°–∫—ñ–ª—å–∫–∏ —á–∞—Å—É –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–æ—á–µ–∫–∞—Ç–∏ –ø–µ—Ä–µ–¥ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è–º? –í–∫–∞–∂—ñ—Ç—å:\n"
                                      "*–°–∫—ñ–ª—å–∫–∏ –¥–Ω—ñ–≤?* (–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ)", parse_mode='Markdown')
    bot.register_next_step_handler(message, get_days)

def get_days(message):
    try:
        days = int(message.text)
        reminders[message.chat.id]['days'] = days
        bot.send_message(message.chat.id, f"–î–Ω—ñ: {days}. –°–∫—ñ–ª—å–∫–∏ –≥–æ–¥–∏–Ω? (–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ)")
        bot.register_next_step_handler(message, get_hours)
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –¥–ª—è –¥–Ω—ñ–≤.", parse_mode='Markdown')
        bot.register_next_step_handler(message, get_days)

def get_hours(message):
    try:
        hours = int(message.text)
        reminders[message.chat.id]['hours'] = hours
        bot.send_message(message.chat.id, f"–ì–æ–¥–∏–Ω–∏: {hours}. –°–∫—ñ–ª—å–∫–∏ —Ö–≤–∏–ª–∏–Ω? (–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ)")
        bot.register_next_step_handler(message, get_minutes)
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –¥–ª—è –≥–æ–¥–∏–Ω.", parse_mode='Markdown')
        bot.register_next_step_handler(message, get_hours)

def get_minutes(message):
    try:
        minutes = int(message.text)
        reminders[message.chat.id]['minutes'] = minutes
        bot.send_message(message.chat.id, f"–•–≤–∏–ª–∏–Ω–∏: {minutes}. –°–∫—ñ–ª—å–∫–∏ —Å–µ–∫—É–Ω–¥? (–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ)")
        bot.register_next_step_handler(message, get_seconds)
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –¥–ª—è —Ö–≤–∏–ª–∏–Ω.", parse_mode='Markdown')
        bot.register_next_step_handler(message, get_minutes)

def get_seconds(message):
    try:
        seconds = int(message.text)
        reminders[message.chat.id]['seconds'] = seconds

        total_time = (reminders[message.chat.id]['days'] * 24 * 60 * 60) + \
                     (reminders[message.chat.id]['hours'] * 60 * 60) + \
                     (reminders[message.chat.id]['minutes'] * 60) + \
                     reminders[message.chat.id]['seconds']

        bot.send_message(message.chat.id,
                         f"‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n"
                         f"–í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ *{reminders[message.chat.id]['days']} –¥–Ω—ñ(–≤), "
                         f"{reminders[message.chat.id]['hours']} –≥–æ–¥–∏–Ω(–∏), "
                         f"{reminders[message.chat.id]['minutes']} —Ö–≤–∏–ª–∏–Ω(–∏), "
                         f"{reminders[message.chat.id]['seconds']} —Å–µ–∫—É–Ω–¥*.",
                         parse_mode='Markdown')

        reminder_thread = threading.Thread(target=send_reminder_after_time, args=(message.chat.id, total_time))
        reminder_thread.start()

    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –¥–ª—è —Å–µ–∫—É–Ω–¥.", parse_mode='Markdown')
        bot.register_next_step_handler(message, get_seconds)

def send_reminder_after_time(chat_id, total_time):
    time.sleep(total_time)
    bot.send_message(chat_id, reminders[chat_id]['message'])

@bot.message_handler(commands=['weather'])
def weather(message):
    city = message.text.split(" ", 1)[1] if len(message.text.split()) > 1 else ""
    if city:
        weather_info = get_weather(city)
        bot.send_message(message.chat.id, weather_info)
    else:
        bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ç–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /weather <–º—ñ—Å—Ç–æ>")

@bot.message_handler(commands=['stop'])
def stop(message):
    bot.send_message(message.chat.id, 'üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ.')
    bot.stop_polling()

bot.polling(none_stop=True)
